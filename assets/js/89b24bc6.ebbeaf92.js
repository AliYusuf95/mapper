(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{116:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),s=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},b=function(e){var n=s(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=s(t),m=a,d=b["".concat(p,".").concat(m)]||b[m]||u[m]||o;return t?r.a.createElement(d,i(i({ref:n},c),{},{components:t})):r.a.createElement(d,i({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var c=2;c<o;c++)p[c]=t[c];return r.a.createElement.apply(null,p)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},92:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return s}));var a=t(3),r=t(7),o=(t(0),t(116)),p={id:"nestjs",title:"NestJS Integration",sidebar_label:"NestJS"},i={unversionedId:"nestjs",id:"nestjs",isDocsHomePage:!1,title:"NestJS Integration",description:"@automapper/nestjs is the official integration for NestJS.",source:"@site/docs/nestjs.md",slug:"/nestjs",permalink:"/docs/nestjs",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/nestjs.md",version:"current",sidebar_label:"NestJS",sidebar:"docs",previous:{title:"Extend plugin",permalink:"/docs/plugins-system/extend-plugin"},next:{title:"Migrations",permalink:"/docs/migrations"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"<code>singular</code>",id:"singular",children:[]}]},{value:"Profile",id:"profile",children:[]},{value:"<code>MapInterceptor</code>",id:"mapinterceptor",children:[]},{value:"<code>MapPipe</code>",id:"mappipe",children:[]}],c={toc:l};function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@automapper/nestjs")," is the official integration for ",Object(o.b)("a",{parentName:"p",href:"https://nestjs.com"},"NestJS"),"."),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"npm i @automapper/nestjs\n# or with yarn\nyarn add @automapper/nestjs\n")),Object(o.b)("h4",{id:"peerdependencies"},Object(o.b)("inlineCode",{parentName:"h4"},"peerDependencies")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@automapper/nestjs")," depends on ",Object(o.b)("inlineCode",{parentName:"p"},"@automapper/core")," and ",Object(o.b)("inlineCode",{parentName:"p"},"@automapper/types"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"npm i @automapper/core\nnpm i -D @automapper/types\n# or with yarn\nyarn add @automapper/core\nyarn add -D @automapper/types\n")),Object(o.b)("h4",{id:"plugin"},"Plugin"),Object(o.b)("p",null,"Recommendation is to use ",Object(o.b)("inlineCode",{parentName:"p"},"@automapper/classes")," in a NestJS application."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Import ",Object(o.b)("inlineCode",{parentName:"li"},"AutomapperModule.forRoot()")," in ",Object(o.b)("inlineCode",{parentName:"li"},"AppModule"))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"@Module({\n  imports: [\n    AutomapperModule.forRoot({\n      options: [{ name: 'blah', pluginInitializer: classes }],\n      singular: true,\n    }),\n  ],\n})\nexport class AppModule {}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"AutomapperModule.forRoot()")," accepts a ",Object(o.b)("inlineCode",{parentName:"li"},"AutomapperModuleOptions")," which has the following interface:")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"/**\n * Options for AutomapperModule.forRoot()\n */\nexport interface AutomapperModuleOptions {\n  /**\n   * An array of CreateMapperOptions to create multiple mappers\n   */\n  options: CreateMapperOptions[];\n  /**\n   * Global ErrorHandler to pass to all mappers\n   */\n  globalErrorHandler?: ErrorHandler;\n  /**\n   * Global NamingConventions to pass to all mappers\n   */\n  globalNamingConventions?: {\n    source: NamingConvention;\n    destination: NamingConvention;\n  };\n  /**\n   * Set to true if you want to use the default Mapper token for when only one mapper is setup with forRoot\n   * @default false\n   */\n  singular?: boolean;\n}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Pass in multiple ",Object(o.b)("inlineCode",{parentName:"li"},"CreateMapperOptions")," to initialize multiple ",Object(o.b)("inlineCode",{parentName:"li"},"Mapper")," with ",Object(o.b)("inlineCode",{parentName:"li"},"AutomapperModule.forRoot()")),Object(o.b)("li",{parentName:"ul"},"Use ",Object(o.b)("inlineCode",{parentName:"li"},"@InjectMapper()")," to inject the ",Object(o.b)("inlineCode",{parentName:"li"},"Mapper")," in NestJS's ",Object(o.b)("inlineCode",{parentName:"li"},"Injectable"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@InjectMapper()")," accepts an optional argument ",Object(o.b)("inlineCode",{parentName:"li"},"name"),". This is the name of the ",Object(o.b)("inlineCode",{parentName:"li"},"CreateMapperOptions")," passed to ",Object(o.b)("inlineCode",{parentName:"li"},"AutomapperModule.forRoot()")),Object(o.b)("li",{parentName:"ul"},"When ",Object(o.b)("inlineCode",{parentName:"li"},"singular")," is ",Object(o.b)("inlineCode",{parentName:"li"},"true"),", ",Object(o.b)("inlineCode",{parentName:"li"},"@InjectMapper()")," will inject the ",Object(o.b)("strong",{parentName:"li"},"default")," single ",Object(o.b)("inlineCode",{parentName:"li"},"Mapper")," initialized."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"AutomapperModule")," is a ",Object(o.b)("inlineCode",{parentName:"li"},"Global")," module, so it is only needed to be imported once to have the ",Object(o.b)("inlineCode",{parentName:"li"},"Mapper")," available across the application")),Object(o.b)("h3",{id:"singular"},Object(o.b)("inlineCode",{parentName:"h3"},"singular")),Object(o.b)("p",null,"The main difference is as follows:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// without singular\n\n@Module({\n  imports: [\n    AutomapperModule.forRoot({\n      options: [{ name: 'blah', pluginInitializer: classes }],\n    }),\n  ],\n})\nexport class AppModule {}\n\n@Injectable()\nexport class Service {\n  // have to pass in the name of the mapper to InjectMapper\n  constructor(@InjectMapper('blah') private blahMapper: Mapper) {}\n}\n\n// with singular\n\n@Module({\n  imports: [\n    AutomapperModule.forRoot({\n      options: [{ name: 'blah', pluginInitializer: classes }],\n      singular: true,\n    }),\n  ],\n})\nexport class AppModule {}\n\n@Injectable()\nexport class Service {\n  // do not have to pass in the name of the mapper to InjectMapper\n  constructor(@InjectMapper() private blahMapper: Mapper) {}\n}\n")),Object(o.b)("h2",{id:"profile"},"Profile"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Profile")," is just another ",Object(o.b)("inlineCode",{parentName:"p"},"Injectable")," in NestJS. Make sure to ",Object(o.b)("inlineCode",{parentName:"p"},"extends AutomapperProfile")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { AutomapperProfile } from '@automapper/nestjs';\nimport type { Mapper } from '@automapper/types';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UserProfile extends AutomapperProfile {\n  constructor(@InjectMapper() mapper: Mapper) {\n    super(mapper);\n  }\n\n  mapProfile() {\n    return (mapper) => {\n      mapper.createMap(User, UserDto);\n    };\n  }\n}\n")),Object(o.b)("p",null,"Then provide ",Object(o.b)("inlineCode",{parentName:"p"},"UserProfile")," in a ",Object(o.b)("inlineCode",{parentName:"p"},"Module")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"@Module({\n  providers: [UserProfile],\n})\nexport class UserModule {}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"AutomapperProfile")," enforces the sub-classes to implement a ",Object(o.b)("inlineCode",{parentName:"li"},"mapProfile()")," method that will return a ",Object(o.b)("inlineCode",{parentName:"li"},"MappingProfile"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Profile")," can have other Services injected to its constructor if needed.")),Object(o.b)("h2",{id:"mapinterceptor"},Object(o.b)("inlineCode",{parentName:"h2"},"MapInterceptor")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@automapper/nestjs")," provides ",Object(o.b)("inlineCode",{parentName:"p"},"MapInterceptor"),". In cases where you do not care about annotating the correct return type for a ",Object(o.b)("strong",{parentName:"p"},"Controller#method")," and want your ",Object(o.b)("strong",{parentName:"p"},"Service")," to be a little cleaner, you can utilize the ",Object(o.b)("inlineCode",{parentName:"p"},"MapInterceptor")," to execute the mapping."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { MapInterceptor } from '@automapper/nestjs';\n\nexport class UserController {\n  @Get('me')\n  @UseInterceptors(MapInterceptor(UserDto, User))\n  me() {\n    // userService.getMe() returns a User here and does not have mapping logic in it.\n    return this.userService.getMe();\n  }\n}\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"MapInterceptor")," has the following signature:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"MapInterceptor(destinationModelType, sourceModelType, {\n  isArray?: boolean;\n  mapperName?: string;\n} & MapOptions)\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"See ",Object(o.b)("a",{parentName:"p",href:"/docs/misc/callbacks"},"MapOptions"))),Object(o.b)("h2",{id:"mappipe"},Object(o.b)("inlineCode",{parentName:"h2"},"MapPipe")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@automapper/nestjs")," provides ",Object(o.b)("inlineCode",{parentName:"p"},"MapPipe"),". When you want to transform the incoming request body before it gets to the route handler, you can utilize ",Object(o.b)("inlineCode",{parentName:"p"},"MapPipe")," to achieve this behavior"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"@Post('/from-body')\npostFromBody(@Body(MapPipe(UserDto, User)) user: UserDto) {\n    // from the request perspective, user coming in as an User object but will be mapped to UserDto with MapPipe\n    return user;\n}\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"MapPipe")," only works with ",Object(o.b)("inlineCode",{parentName:"p"},"@Body")," or ",Object(o.b)("inlineCode",{parentName:"p"},"@Query"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"@Get('/from-query')\ngetFromQuery(@Query(MapPipe(UserDto, User)) user: UserDto) {\n    // from the request perspective, user coming in as an User object but will be mapped to UserDto with MapPipe\n    return user;\n}\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Note that when you send a request with ",Object(o.b)("inlineCode",{parentName:"p"},"Body")," or ",Object(o.b)("inlineCode",{parentName:"p"},"Query"),", the data is serialized. Data-type like ",Object(o.b)("inlineCode",{parentName:"p"},"Date")," will come in the request handler as ",Object(o.b)("inlineCode",{parentName:"p"},"string"),". Hence, please be cautious of the mapping configuration when you use ",Object(o.b)("inlineCode",{parentName:"p"},"MapPipe"))),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"MapPipe")," has the same signature as ",Object(o.b)("inlineCode",{parentName:"p"},"MapInterceptor")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"MapPipe(destinationModelType, sourceModelType, {\n  isArray?: boolean;\n  mapperName?: string;\n} & MapOptions)\n")))}s.isMDXComponent=!0}}]);