(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return u}));var r=n(3),o=n(7),a=(n(0),n(116)),i={id:"convert-using",title:"ConvertUsing",sidebar_label:"ConvertUsing"},c={unversionedId:"mapping-configuration/convert-using",id:"mapping-configuration/convert-using",isDocsHomePage:!1,title:"ConvertUsing",description:"convertUsing() accepts a Converter interface which is an object with a convert() method.",source:"@site/docs/mapping-configuration/convert-using.md",slug:"/mapping-configuration/convert-using",permalink:"/docs/mapping-configuration/convert-using",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/convert-using.md",version:"current",sidebar_label:"ConvertUsing",sidebar:"docs",previous:{title:"MapWith",permalink:"/docs/mapping-configuration/map-with"},next:{title:"NullSubstitution",permalink:"/docs/mapping-configuration/null-substitution"}},p=[{value:"Why?",id:"why",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Usage without <strong>Selector</strong>",id:"usage-without-selector",children:[]}],s={toc:p};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"convertUsing()")," accepts a ",Object(a.b)("inlineCode",{parentName:"p"},"Converter")," interface which is an object with a ",Object(a.b)("inlineCode",{parentName:"p"},"convert()")," method."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export interface Converter<\n  TConvertSource = unknown,\n  TConvertDestination = unknown\n> {\n  convert(source: TConvertSource): TConvertDestination;\n}\n")),Object(a.b)("h2",{id:"why"},"Why?"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Converter")," can be used to extract common logic where we want to map one data type to another. This logic might be used across different mappings across the application."),Object(a.b)("p",null,"For example, we might have a ",Object(a.b)("inlineCode",{parentName:"p"},"dateToStringConverter"),":"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import type { Converter } from '@automapper/types';\n\nexport const dateToStringConverter: Converter<Date, string> = {\n  convert(source) {\n    // maybe handle validation, additional parsing, or format here\n    return source.toDateString();\n  },\n};\n")),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("p",null,"Beside the ",Object(a.b)("inlineCode",{parentName:"p"},"Converter"),", ",Object(a.b)("inlineCode",{parentName:"p"},"convertUsing()")," accepts a second argument ",Object(a.b)("strong",{parentName:"p"},"Selector")," to select a value from the ",Object(a.b)("strong",{parentName:"p"},"Source"),". The return type of this ",Object(a.b)("strong",{parentName:"p"},"Selector")," needs to match the data type of the ",Object(a.b)("inlineCode",{parentName:"p"},"source")," of the ",Object(a.b)("inlineCode",{parentName:"p"},"Converter"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import { convertUsing } from '@automapper/core';\n\nmapper.createMap(User, UserDto).forMember(\n  (destination) => destination.birthday,\n  convertUsing(dateToStringConverter, (source) => source.birthday)\n);\n")),Object(a.b)("h2",{id:"usage-without-selector"},"Usage without ",Object(a.b)("strong",{parentName:"h2"},"Selector")),Object(a.b)("p",null,"We can have ",Object(a.b)("inlineCode",{parentName:"p"},"Converter#convert")," takes in the whole ",Object(a.b)("strong",{parentName:"p"},"Source")," object as its argument. If we have these types of ",Object(a.b)("inlineCode",{parentName:"p"},"Converter"),", we do not need to pass in the ",Object(a.b)("strong",{parentName:"p"},"Selector")," because the whole ",Object(a.b)("strong",{parentName:"p"},"Source")," object will be passed to ",Object(a.b)("inlineCode",{parentName:"p"},"Converter#convert")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"export const fullNameConverter: Converter<User, string> = {\n  convert(source) {\n    return source.firstName + ' ' + source.lastName;\n  },\n};\n\nimport { convertUsing } from '@automapper/core';\n\nmapper\n  .createMap(User, UserDto)\n  .forMember(\n    (destination) => destination.fullName,\n    convertUsing(fullNameConverter)\n  );\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"convertUsing()")," will set the ",Object(a.b)("inlineCode",{parentName:"p"},"TransformationType")," to ",Object(a.b)("inlineCode",{parentName:"p"},"TransformationType.ConvertUsing")))}u.isMDXComponent=!0},116:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=u(n),m=r,d=l["".concat(i,".").concat(m)]||l[m]||b[m]||a;return n?o.a.createElement(d,c(c({ref:t},s),{},{components:n})):o.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);