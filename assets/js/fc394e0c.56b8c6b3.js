(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{113:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return l}));var a=t(3),i=t(7),r=(t(0),t(116)),o={id:"create-plugin",title:"Create plugin",sidebar_label:"Create plugin"},p={unversionedId:"plugins-system/create-plugin",id:"plugins-system/create-plugin",isDocsHomePage:!1,title:"Create plugin",description:"Responsibilities",source:"@site/docs/plugins-system/create-plugin.md",slug:"/plugins-system/create-plugin",permalink:"/docs/plugins-system/create-plugin",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/plugins-system/create-plugin.md",version:"current",sidebar_label:"Create plugin",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/plugins-system/introduce-to-sequelize"},next:{title:"Extend plugin",permalink:"/docs/plugins-system/extend-plugin"}},s=[{value:"Responsibilities",id:"responsibilities",children:[]},{value:"AutoMapper Plugin",id:"automapper-plugin",children:[]}],u={toc:s};function l(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"responsibilities"},"Responsibilities"),Object(r.b)("p",null,"In AutoMapper TypeScript, a plugin will have the following responsibilities:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Provide metadata storing mechanism. In order for AutoMapper to work ",Object(r.b)("em",{parentName:"p"},"automatically")," in some manner, metadata of the models need to be stored before any ",Object(r.b)("inlineCode",{parentName:"p"},"Mapping")," is initialized.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Since the metadata is stored on the plugin, the plugin also needs to provide a way to instantiate a model with the stored metadata."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"To explain this further, think of a TS/ES6 Class.")),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-ts"},"class Class {\n  foo: string;\n  bar: number;\n}\n")),Object(r.b)("p",{parentName:"li"},"When we invoke ",Object(r.b)("inlineCode",{parentName:"p"},"new Class()"),", this is called instantiation. For this case, we'd get an empty ",Object(r.b)("inlineCode",{parentName:"p"},"Class {}")," without either ",Object(r.b)("inlineCode",{parentName:"p"},"foo")," or ",Object(r.b)("inlineCode",{parentName:"p"},"bar"),". AutoMapper won't work with this. Plugin's instantiation needs to instantiate the model with the metadata so we'd get: ",Object(r.b)("inlineCode",{parentName:"p"},"Class { foo: undefined, bar: undefined }"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Provide mapping storing mechanism.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Since mapping is stored on the plugin side, plugin needs to provide a way to retrieve the mapping for a particular pair of models."))),Object(r.b)("h2",{id:"automapper-plugin"},"AutoMapper Plugin"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"/**\n * How a plugin should provide\n */\nexport interface MapPlugin<TKey = unknown> {\n  /**\n   * Instruction on how a plugin should initialize a mapping for a pair of Source <> Destination\n   * This method will make use of the plugin's internal storages to store information for this pair.\n   *\n   * @param source - a key to be used to identify the information about a particular Source\n   * @param destination - a key to be used to identify the information about a particular Destination\n   * @param options {CreateMapOptions} - options for when initialize a mapping (which is globally applied to this pair of Source <> Destination)\n   */\n  initializeMapping(\n    source: TKey,\n    destination: TKey,\n    options?: CreateMapOptions\n  ): Mapping;\n\n  /**\n   * Get the Mapping for a pair of Source <> Destination\n   *\n   * @param source - a key to be used to identify the information about a particular Source\n   * @param destination - a key to be used to identify the information about a particular Destination\n   */\n  getMapping(source: TKey, destination: TKey): Mapping;\n\n  /**\n   * An optional pre-map function to prepare the source and destination before map\n   *\n   * @param source - a key to be used to identify the information about a particular Source\n   * @param destination - a key to be used to identify the information about a particular Destination\n   * @param sourceObj - a plain object that takes the shape of the source\n   * @param destinationObj - a plain object that takes the shape of the destination\n   */\n  preMap?<\n    TSource extends Dictionary<TSource> = unknown,\n    TDestination extends Dictionary<TDestination> = unknown\n  >(\n    source: TKey,\n    destination: TKey,\n    sourceObj?: TSource,\n    destinationObj?: TDestination\n  ): [sourceInstance: TSource, destinationInstance: TDestination];\n\n  /**\n   * An optional pre-mapArray function to prepare the sourceArray before mapArray\n   *\n   * @param source - a key to be used to identify the information about a particular Source\n   * @param sourceArr - an array of TSource\n   */\n  preMapArray?<TSource extends Dictionary<TSource> = unknown>(\n    source: TKey,\n    sourceArr: TSource[]\n  ): TSource[];\n\n  /**\n   * Optional method to clean up the plugin's storages\n   */\n  dispose?(): void;\n}\n")),Object(r.b)("p",null,"An AutoMapper plugin is just a ",Object(r.b)("inlineCode",{parentName:"p"},"MapPluginInitilizer")," which is just a function that accepts an ",Object(r.b)("inlineCode",{parentName:"p"},"ErrorHandler")," and returns a ",Object(r.b)("inlineCode",{parentName:"p"},"MapPlugin"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"/**\n * Plugin initializer\n */\nexport interface MapPluginInitializer<TKey = unknown> {\n  (errorHandler: ErrorHandler): MapPlugin<TKey>;\n}\n")))}l.isMDXComponent=!0},116:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=i.a.createContext({}),l=function(e){var n=i.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=l(e.components);return i.a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(t),b=a,m=c["".concat(o,".").concat(b)]||c[b]||d[b]||r;return t?i.a.createElement(m,p(p({ref:n},u),{},{components:t})):i.a.createElement(m,p({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=b;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var u=2;u<r;u++)o[u]=t[u];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);