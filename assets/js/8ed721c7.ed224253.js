(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},m=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(n),b=r,d=m["".concat(i,".").concat(b)]||m[b]||s[b]||o;return n?a.a.createElement(d,p(p({ref:t},l),{},{components:n})):a.a.createElement(d,p({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),o=(n(0),n(116)),i={id:"map-with",title:"MapWith",sidebar_label:"MapWith"},p={unversionedId:"mapping-configuration/map-with",id:"mapping-configuration/map-with",isDocsHomePage:!1,title:"MapWith",description:"By default, @automapper/core will be able to map nested models for matching properties. In some rare cases where we have different properties name with related models, we can utilize mapWith()",source:"@site/docs/mapping-configuration/map-with.md",slug:"/mapping-configuration/map-with",permalink:"/docs/mapping-configuration/map-with",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/map-with.md",version:"current",sidebar_label:"MapWith",sidebar:"docs",previous:{title:"FromValue",permalink:"/docs/mapping-configuration/from-value"},next:{title:"ConvertUsing",permalink:"/docs/mapping-configuration/convert-using"}},c=[{value:"Author note on <code>mapWith()</code>",id:"author-note-on-mapwith",children:[]}],l={toc:c};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"By default, ",Object(o.b)("inlineCode",{parentName:"p"},"@automapper/core")," will be able to map nested models for matching properties. In some rare cases where we have different properties name with related models, we can utilize ",Object(o.b)("inlineCode",{parentName:"p"},"mapWith()")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"mapWith()")," accepts three arguments:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withDestination()"),": a function that returns the nested model to map ",Object(o.b)("strong",{parentName:"li"},"to")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withSourceValue()"),": a function that accepts the ",Object(o.b)("strong",{parentName:"li"},"Source")," and returns a value from a member of the ",Object(o.b)("strong",{parentName:"li"},"Source")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"withSource()"),": a function that returns the nested model to map ",Object(o.b)("strong",{parentName:"li"},"with"))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { mapWith } from '@automapper/core';\n\nmapper.createMap(User, UserDto).forMember(\n  (destination) => destination.someProfile,\n  mapWith(\n    () => ProfileDto,\n    (source) => source.originalProfile,\n    () => Profile\n  )\n);\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"mapWith()")," will set the ",Object(o.b)("inlineCode",{parentName:"p"},"TransformationType")," to ",Object(o.b)("inlineCode",{parentName:"p"},"TransformationType.MapWith")),Object(o.b)("h3",{id:"author-note-on-mapwith"},"Author note on ",Object(o.b)("inlineCode",{parentName:"h3"},"mapWith()")),Object(o.b)("p",null,"As much as I hate to admit it, ",Object(o.b)("inlineCode",{parentName:"p"},"mapWith()")," is pretty useful. When you work with Server-side NodeJS, the database will, most of the time, return raw objects when you query for your data. Even with TypeScript, these are just Plain Objects."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"mapWith()")," will actually help in these cases because we provide the required information for ",Object(o.b)("inlineCode",{parentName:"p"},"Mapper")," to look up the ",Object(o.b)("inlineCode",{parentName:"p"},"Mapping")," for the data."))}u.isMDXComponent=!0}}]);