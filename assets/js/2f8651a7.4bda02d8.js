(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{116:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),s=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},m=function(e){var t=s(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(a),b=n,u=m["".concat(i,".").concat(b)]||m[b]||d[b]||o;return a?r.a.createElement(u,p(p({ref:t},c),{},{components:a})):r.a.createElement(u,p({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=b;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var c=2;c<o;c++)i[c]=a[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},76:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return p})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(7),o=(a(0),a(116)),i={id:"pojos-metadata",title:"Metadata",sidebar_label:"Metadata"},p={unversionedId:"plugins-system/pojos-metadata",id:"plugins-system/pojos-metadata",isDocsHomePage:!1,title:"Metadata",description:"Different than @automapper/classes, @automapper/pojos provides a different way to keep track of the metadata. That is a method called: createMetadataMap()",source:"@site/docs/plugins-system/pojos-metadata.md",slug:"/plugins-system/pojos-metadata",permalink:"/docs/plugins-system/pojos-metadata",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/plugins-system/pojos-metadata.md",version:"current",sidebar_label:"Metadata",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/plugins-system/introduce-to-pojos"},next:{title:"Introduction",permalink:"/docs/plugins-system/introduce-to-sequelize"}},l=[{value:"<code>createMetadataMap()</code>",id:"createmetadatamap",children:[]},{value:"Storages",id:"storages",children:[{value:"PojosMappingStorage",id:"pojosmappingstorage",children:[]},{value:"PojosMetadataStorage",id:"pojosmetadatastorage",children:[]},{value:"PojosSymbolStorage",id:"pojossymbolstorage",children:[]}]}],c={toc:l};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Different than ",Object(o.b)("inlineCode",{parentName:"p"},"@automapper/classes"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@automapper/pojos")," provides a different way to keep track of the metadata. That is a method called: ",Object(o.b)("inlineCode",{parentName:"p"},"createMetadataMap()")),Object(o.b)("h2",{id:"createmetadatamap"},Object(o.b)("inlineCode",{parentName:"h2"},"createMetadataMap()")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"createMetadataMap()")," is a function that accepts 2 - 3 arguments:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"metaKey"),": In ",Object(o.b)("inlineCode",{parentName:"li"},"@automapper/classes"),", a class constructor is used as the ",Object(o.b)("strong",{parentName:"li"},"unique")," ",Object(o.b)("inlineCode",{parentName:"li"},"metaKey"),". In ",Object(o.b)("inlineCode",{parentName:"li"},"@automapper/pojos"),", we need to provide a ",Object(o.b)("strong",{parentName:"li"},"unique")," string. Usually, the string representation of the Interface name would be sufficient"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"metadataOrMetadataMap"),": the second argument can be a ",Object(o.b)("inlineCode",{parentName:"li"},"MetadataMap")," object or a reference to an existing ",Object(o.b)("inlineCode",{parentName:"li"},"metaKey"),". This is to help with reusability for models that have similar metadata."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"metadataMap"),": the third argument is an optional ",Object(o.b)("inlineCode",{parentName:"li"},"MetadataMap")," object. This is to provide additional metadata for a ",Object(o.b)("inlineCode",{parentName:"li"},"metaKey")," that weren't already available on the existing ",Object(o.b)("inlineCode",{parentName:"li"},"metaKey")," provided in the second argument. This is also used to negate any unwanted metadata from the second argument ",Object(o.b)("inlineCode",{parentName:"li"},"metaKey"))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { createMetadataMap } from '@automapper/pojos';\n\nexport interface SimpleBar {\n  bar: string;\n}\n\nexport interface SimpleBarVm {\n  bar: string;\n}\n\nexport interface SimpleFoo {\n  foo: string;\n  bar: SimpleBar;\n  fooBar: number;\n}\n\nexport interface SimpleFooVm {\n  foo: string;\n  bar: SimpleBarVm;\n  fooBar: number;\n}\n\nexport function createSimpleFooBarMetadata() {\n  // create a metadataMap for SimpleBar\n  createMetadataMap<SimpleBar>('SimpleBar', { bar: String });\n\n  // create a metadataMap for SimpleBarVm. We reuse \"SimpleBar\" metadata\n  createMetadataMap<SimpleBarVm>('SimpleBarVm', 'SimpleBar');\n\n  // create a metadataMap for SimpleFoo\n  createMetadataMap<SimpleFoo>('SimpleFoo', {\n    foo: String,\n    bar: 'SimpleBar',\n    fooBar: Number,\n  });\n\n  // create a metadataMap for SimpleFooVm\n  // We reuse foo and fooBar from SimpleFoo and override bar\n  createMetadataMap<SimpleFooVm>('SimpleFooVm', 'SimpleFoo', {\n    bar: 'SimpleBarVm',\n  });\n}\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"createMetadataMap()")," has to be called before invoking ",Object(o.b)("inlineCode",{parentName:"p"},"mapper.createMap()")," or ",Object(o.b)("inlineCode",{parentName:"p"},"mapper.addProfile()")),Object(o.b)("h2",{id:"storages"},"Storages"),Object(o.b)("p",null,"Same as ",Object(o.b)("inlineCode",{parentName:"p"},"@automapper/classes"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@automapper/pojos")," has a couple of storages to handle storing the metadata"),Object(o.b)("h3",{id:"pojosmappingstorage"},"PojosMappingStorage"),Object(o.b)("p",null,"This is to store the ",Object(o.b)("inlineCode",{parentName:"p"},"Mapping")," of all the models used within the ",Object(o.b)("inlineCode",{parentName:"p"},"Mapper")),Object(o.b)("h3",{id:"pojosmetadatastorage"},"PojosMetadataStorage"),Object(o.b)("p",null,"This is to store the metadata of all the models used within the ",Object(o.b)("inlineCode",{parentName:"p"},"Mapper")),Object(o.b)("h3",{id:"pojossymbolstorage"},"PojosSymbolStorage"),Object(o.b)("p",null,"This is to store all the metadata for each symbol (",Object(o.b)("inlineCode",{parentName:"p"},"metaKey"),")"))}s.isMDXComponent=!0}}]);