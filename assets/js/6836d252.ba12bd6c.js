(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return g}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),s=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=s(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),u=s(n),b=r,g=u["".concat(i,".").concat(b)]||u[b]||l[b]||o;return n?a.a.createElement(g,p(p({ref:t},c),{},{components:n})):a.a.createElement(g,p({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},87:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return m})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),o=(n(0),n(116)),i={id:"map-with-arguments",title:"MapWithArguments",sidebar_label:"MapWithArguments"},p={unversionedId:"mapping-configuration/map-with-arguments",id:"mapping-configuration/map-with-arguments",isDocsHomePage:!1,title:"MapWithArguments",description:"Sometimes the consumers might need to pass in additional arguments to the map operations at runtime when invoking mapper.map(), mapWithArguments() is the map function that allows this behavior.",source:"@site/docs/mapping-configuration/map-with-arguments.md",slug:"/mapping-configuration/map-with-arguments",permalink:"/docs/mapping-configuration/map-with-arguments",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/map-with-arguments.md",version:"current",sidebar_label:"MapWithArguments",sidebar:"docs",previous:{title:"Ignore",permalink:"/docs/mapping-configuration/ignore"},next:{title:"MapDefer",permalink:"/docs/mapping-configuration/map-defer"}},m=[{value:"Value Resolver",id:"value-resolver",children:[]}],c={toc:m};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Sometimes the consumers might need to pass in additional arguments to the map operations at runtime when invoking ",Object(o.b)("inlineCode",{parentName:"p"},"mapper.map()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"mapWithArguments()")," is the map function that allows this behavior."),Object(o.b)("p",null,"All ",Object(o.b)("inlineCode",{parentName:"p"},"map()")," operations (eg: ",Object(o.b)("inlineCode",{parentName:"p"},"mapper.map()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"mapper.mapArray()")," ...) accepts an optional ",Object(o.b)("inlineCode",{parentName:"p"},"MapOptions")," in which there is a property called ",Object(o.b)("inlineCode",{parentName:"p"},"extraArguments")," that the consumers can use to pass in additional arguments for ",Object(o.b)("inlineCode",{parentName:"p"},"mapWithArguments()")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { mapWithArguments } from '@automapper/core';\n\nmapper.createMap(User, UserDto).forMember(\n  (destination) => destination.foo,\n  mapWithArguments((source, { argument1 }) => getFoo(source, argument1))\n);\n\n// when we want to run map from a User to a UserDto\nconst dto = mapper.map(someUser, UserDto, User, {\n  extraArguments: { argument1: someValue },\n});\n")),Object(o.b)("h2",{id:"value-resolver"},"Value Resolver"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"/docs/mapping-configuration/map-from"},"Resolver")," can also be used with ",Object(o.b)("inlineCode",{parentName:"p"},"mapWithArguments")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"export const taxResolver: Resolver<Item, { percentage: number }, number> = {\n  resolve(source, { percentage }) {\n    return source.price * percentage;\n  },\n};\n\nmapper\n  .createMap(Item, ItemDto)\n  .forMember((destination) => destination.tax, mapWithArguments(taxResolver));\n\nmapper.map(item, ItemDto, Item, { extraArguments: { percentage: 0.5 } };\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"mapWithArguments()")," will set the ",Object(o.b)("inlineCode",{parentName:"p"},"TransformationType")," to ",Object(o.b)("inlineCode",{parentName:"p"},"TransformationType.MapWithArguments")))}s.isMDXComponent=!0}}]);