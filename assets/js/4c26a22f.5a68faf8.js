(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{116:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var o=t(0),a=t.n(o);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=a.a.createContext({}),l=function(e){var n=a.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},b=function(e){var n=l(e.components);return a.a.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),b=l(t),u=o,d=b["".concat(p,".").concat(u)]||b[u]||m[u]||r;return t?a.a.createElement(d,s(s({ref:n},i),{},{components:t})):a.a.createElement(d,s({ref:n},i))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,p=new Array(r);p[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,p[1]=s;for(var i=2;i<r;i++)p[i]=t[i];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},83:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return l}));var o=t(3),a=t(7),r=(t(0),t(116)),p={id:"classes-mapped-types",title:"Mapped Types",sidebar_label:"Mapped Types"},s={unversionedId:"plugins-system/classes-mapped-types",id:"plugins-system/classes-mapped-types",isDocsHomePage:!1,title:"Mapped Types",description:"@automapper/classes/mapped-types",source:"@site/docs/plugins-system/classes-mapped-types.md",slug:"/plugins-system/classes-mapped-types",permalink:"/docs/plugins-system/classes-mapped-types",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/plugins-system/classes-mapped-types.md",version:"current",sidebar_label:"Mapped Types",sidebar:"docs",previous:{title:"Transformer Plugin",permalink:"/docs/plugins-system/classes-transformer-plugin"},next:{title:"Introduction",permalink:"/docs/plugins-system/introduce-to-pojos"}},c=[{value:"Usage",id:"usage",children:[{value:"<code>MapperPickType</code>",id:"mapperpicktype",children:[]},{value:"<code>MapperOmitType</code>",id:"mapperomittype",children:[]},{value:"<code>MapperIntersectionType</code>",id:"mapperintersectiontype",children:[]}]}],i={toc:c};function l(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"automapperclassesmapped-types"},"@automapper/classes/mapped-types"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"@automapper/classes/mapped-types")," is part of the public API of ",Object(r.b)("inlineCode",{parentName:"p"},"@automapper/classes"),"."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"@automapper/classes/mapped-types")," is inspired by ",Object(r.b)("inlineCode",{parentName:"p"},"@nestjs/mapped-types")," to provide mixins to reduce some boilerplate code."),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("p",null,"All ",Object(r.b)("inlineCode",{parentName:"p"},"Mapper*Type")," are exported from ",Object(r.b)("inlineCode",{parentName:"p"},"@automapper/classes/mapped-types")),Object(r.b)("h3",{id:"mapperpicktype"},Object(r.b)("inlineCode",{parentName:"h3"},"MapperPickType")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"MapperPickType")," accepts an original class, and an array of property keys to ",Object(r.b)("strong",{parentName:"p"},"pick")," from the original class."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n  @AutoMap()\n  bar: number;\n  @AutoMap()\n  baz: boolean;\n}\n\nclass PickFooBar extends MapperPickType(Foo, ['foo', 'bar']) {}\n\nmapper.createMap(Foo, PickFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst pickedFooBar = mapper.map(foo, PickFooBar, Foo);\nconsole.log(pickedFooBar);\n/**\n * PickFooBar { foo: 'foo', bar: 123 }\n * only foo and bar have been picked\n */\n")),Object(r.b)("h3",{id:"mapperomittype"},Object(r.b)("inlineCode",{parentName:"h3"},"MapperOmitType")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"MapperOmitType")," accepts an original class, and an array of property keys to ",Object(r.b)("strong",{parentName:"p"},"omit")," from the original class."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n  @AutoMap()\n  bar: number;\n  @AutoMap()\n  baz: boolean;\n}\n\nclass OmitFooBar extends MapperOmitType(Foo, ['foo', 'bar']) {}\n\nmapper.createMap(Foo, OmitFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst omittedFooBar = mapper.map(foo, OmitFooBar, Foo);\nconsole.log(omittedFooBar);\n/**\n * OmitFooBar { baz: true }\n * foo and bar have been omitted\n */\n")),Object(r.b)("h3",{id:"mapperintersectiontype"},Object(r.b)("inlineCode",{parentName:"h3"},"MapperIntersectionType")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"MapperIntersectionType")," accepts two parent classes to receive all properties from both classes."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n}\n\nclass Bar {\n  @AutoMap()\n  bar: number;\n}\n\nclass IntersectFooBar extends MapperIntersectionType(Foo, Bar) {}\n\nmapper.createMap(IntersectFooBar, Foo);\nmapper.createMap(IntersectFooBar, Bar);\n\nconst intersect = new IntersectFooBar();\nintersect.foo = 'foo';\nintersect.bar = 123;\n\nconst foo = mapper.map(intersect, Foo, IntersectFooBar);\nconsole.log(foo);\n/**\n * Foo { foo: 'foo' }\n */\n\nconst bar = mapper.map(intersect, Bar, IntersectFooBar);\nconsole.log(bar);\n/**\n * Bar { bar: 123 }\n */\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"AutoMapper does not have the concept of mapping multiple ",Object(r.b)("inlineCode",{parentName:"p"},"Sources")," to a ",Object(r.b)("inlineCode",{parentName:"p"},"Destination"),". Hence, please be cautious when to utilize ",Object(r.b)("inlineCode",{parentName:"p"},"MapperIntersectionType"))))}l.isMDXComponent=!0}}]);