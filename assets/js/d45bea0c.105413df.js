(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{109:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return b}));var a=t(3),r=t(7),i=(t(0),t(116)),o={id:"callbacks",title:"Callbacks",sidebar_label:"Callbacks"},c={unversionedId:"misc/callbacks",id:"misc/callbacks",isDocsHomePage:!1,title:"Callbacks",description:"@automapper/core allows for passing in beforeMap and afterMap which will be executed before and/or after a mapping operation. In AutoMapper, these are called MapAction",source:"@site/docs/misc/callbacks.md",slug:"/misc/callbacks",permalink:"/docs/misc/callbacks",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/misc/callbacks.md",version:"current",sidebar_label:"Callbacks",sidebar:"docs",previous:{title:"PreCondition",permalink:"/docs/mapping-configuration/pre-condition"},next:{title:"Map Mutation",permalink:"/docs/misc/map-mutate"}},p=[{value:"<code>Map</code> actions",id:"map-actions",children:[]},{value:"<code>Mapping</code> actions",id:"mapping-actions",children:[]},{value:"Async actions",id:"async-actions",children:[]},{value:"Author note",id:"author-note",children:[]}],l={toc:p};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@automapper/core")," allows for passing in ",Object(i.b)("inlineCode",{parentName:"p"},"beforeMap")," and ",Object(i.b)("inlineCode",{parentName:"p"},"afterMap")," which will be executed ",Object(i.b)("strong",{parentName:"p"},"before")," and/or ",Object(i.b)("strong",{parentName:"p"},"after")," a mapping operation. In AutoMapper, these are called ",Object(i.b)("inlineCode",{parentName:"p"},"MapAction")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"MapAction")," can be provided at two different levels: ",Object(i.b)("inlineCode",{parentName:"p"},"Mapping")," level and ",Object(i.b)("inlineCode",{parentName:"p"},"Map")," level."),Object(i.b)("h2",{id:"map-actions"},Object(i.b)("inlineCode",{parentName:"h2"},"Map")," actions"),Object(i.b)("p",null,"All ",Object(i.b)("inlineCode",{parentName:"p"},"map()")," variations accept optional ",Object(i.b)("inlineCode",{parentName:"p"},"MapOptions")," which is an object with the following interface:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"export interface MapOptions<\n  TSource extends Dictionary<TSource> = unknown,\n  TDestination extends Dictionary<TDestination> = unknown\n> {\n  beforeMap?: MapAction<TSource, TDestination>;\n  afterMap?: MapAction<TSource, TDestination>;\n  extraArguments?: Record<string, unknown>; // <-- to be used with mapWithArguments()\n}\n")),Object(i.b)("p",null,"If any of the ",Object(i.b)("inlineCode",{parentName:"p"},"MapAction")," is provided, it will be called in correct chronological order"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"mapper.map(user, UserDto, User, {\n  beforeMap: (source, destination) => {},\n  afterMap: (source, destination) => {},\n});\n")),Object(i.b)("h2",{id:"mapping-actions"},Object(i.b)("inlineCode",{parentName:"h2"},"Mapping")," actions"),Object(i.b)("p",null,"When we call ",Object(i.b)("inlineCode",{parentName:"p"},"mapper.createMap()"),", we can chain ",Object(i.b)("inlineCode",{parentName:"p"},"beforeMap")," and ",Object(i.b)("inlineCode",{parentName:"p"},"afterMap")," to provide ",Object(i.b)("inlineCode",{parentName:"p"},"Mapping")," actions. These actions will be called for ",Object(i.b)("strong",{parentName:"p"},"ALL")," mapping operations between a ",Object(i.b)("strong",{parentName:"p"},"Source")," and a ",Object(i.b)("strong",{parentName:"p"},"Destination"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"mapper\n  .createMap(User, UserDto)\n  .beforeMap((source, destination) => {})\n  .afterMap((source, destination) => {});\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Map")," actions will ",Object(i.b)("strong",{parentName:"p"},"override")," ",Object(i.b)("inlineCode",{parentName:"p"},"Mapping")," actions."),Object(i.b)("h2",{id:"async-actions"},"Async actions"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"MapAction")," is useful when we're dealing with Asynchronous values. If we want to map an async ",Object(i.b)("strong",{parentName:"p"},"Source#member")," to a sync ",Object(i.b)("strong",{parentName:"p"},"Destination#member"),", the appropriate way to do so is:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ignore()")," ",Object(i.b)("strong",{parentName:"li"},"Destination#member")),Object(i.b)("li",{parentName:"ul"},"Use ",Object(i.b)("inlineCode",{parentName:"li"},"afterMap(async () => {})")," syntax to await for ",Object(i.b)("strong",{parentName:"li"},"Source#member")," then either assign the resolved value to ",Object(i.b)("strong",{parentName:"li"},"Destination#member")," directly or call ",Object(i.b)("inlineCode",{parentName:"li"},"mapper.map()")," with the resolved value.")),Object(i.b)("h2",{id:"author-note"},"Author note"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The arguments passed to ",Object(i.b)("inlineCode",{parentName:"li"},"MapAction")," are mutable. ",Object(i.b)("strong",{parentName:"li"},"Do not")," mutate anything unless you're sure what you are doing."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mapArray()")," will ",Object(i.b)("strong",{parentName:"li"},"ignore")," ",Object(i.b)("inlineCode",{parentName:"li"},"Mapping")," actions due to performance issue. It would not be performant if we have a ",Object(i.b)("inlineCode",{parentName:"li"},"MapAction")," on ",Object(i.b)("inlineCode",{parentName:"li"},"User <> UserDto")," and we run the ",Object(i.b)("inlineCode",{parentName:"li"},"MapAction")," for every single item when we ",Object(i.b)("inlineCode",{parentName:"li"},"mapArray()")," from ",Object(i.b)("inlineCode",{parentName:"li"},"Array<UserDto>")," to ",Object(i.b)("inlineCode",{parentName:"li"},"Array<User>"))))}b.isMDXComponent=!0},116:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),b=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=b(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=b(t),u=a,d=s["".concat(o,".").concat(u)]||s[u]||m[u]||i;return t?r.a.createElement(d,c(c({ref:n},l),{},{components:t})):r.a.createElement(d,c({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);