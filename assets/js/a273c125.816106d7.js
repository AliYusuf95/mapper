(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{116:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),l=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},b=function(e){var n=l(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=l(t),d=a,m=b["".concat(p,".").concat(d)]||b[d]||u[d]||o;return t?r.a.createElement(m,i(i({ref:n},c),{},{components:t})):r.a.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var c=2;c<o;c++)p[c]=t[c];return r.a.createElement.apply(null,p)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},98:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return l}));var a=t(3),r=t(7),o=(t(0),t(116)),p={id:"auto",title:"Auto in AutoMapper",sidebar_label:"Auto in AutoMapper"},i={unversionedId:"mapping-configuration/auto",id:"mapping-configuration/auto",isDocsHomePage:!1,title:"Auto in AutoMapper",description:"Matching properties",source:"@site/docs/mapping-configuration/auto.md",slug:"/mapping-configuration/auto",permalink:"/docs/mapping-configuration/auto",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/auto.md",version:"current",sidebar_label:"Auto in AutoMapper",sidebar:"docs",previous:{title:"Fundamentals",permalink:"/docs/fundamentals"},next:{title:"Introduce to Custom Configuration",permalink:"/docs/mapping-configuration/introduce-to-custom-configuration"}},s=[{value:"Matching properties",id:"matching-properties",children:[]},{value:"Flattening",id:"flattening",children:[]},{value:"Extends other <code>Mapping</code>",id:"extends-other-mapping",children:[]},{value:"Arrays of objects",id:"arrays-of-objects",children:[]},{value:"Enums",id:"enums",children:[]},{value:"(<code>classes</code> only) Transformer Plugin",id:"classes-only-transformer-plugin",children:[]}],c={toc:s};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"matching-properties"},"Matching properties"),Object(o.b)("p",null,"We have already seen that matching properties are mapped automatically with the help of ",Object(o.b)("inlineCode",{parentName:"p"},"@AutoMap()")," decorator (with ",Object(o.b)("inlineCode",{parentName:"p"},"classes")," plugin)"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"For ",Object(o.b)("inlineCode",{parentName:"p"},"@automapper/pojos"),", there is a different approach.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n}\n\nclass FooDto {\n  @AutoMap()\n  foo: string;\n}\n")),Object(o.b)("h2",{id:"flattening"},"Flattening"),Object(o.b)("p",null,"Flattening is only applied when ",Object(o.b)("inlineCode",{parentName:"p"},"namingConventions")," is set either on the ",Object(o.b)("inlineCode",{parentName:"p"},"Mapping")," or globally."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"class Bar {\n  @AutoMap()\n  baz: string;\n}\n\nclass Foo {\n  @AutoMap()\n  foo: string;\n  @AutoMap({ typeFn: () => Bar })\n  bar: Bar;\n}\n\nclass FooDto {\n  @AutoMap()\n  foo: string;\n  @AutoMap()\n  barBaz: string;\n}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Matching Properties")," and ",Object(o.b)("strong",{parentName:"p"},"Flattening")," are to encourage the consumers to structure their data models in a coherent way, so they can get the most out of an AutoMapper."),Object(o.b)("h2",{id:"extends-other-mapping"},"Extends other ",Object(o.b)("inlineCode",{parentName:"h2"},"Mapping")),Object(o.b)("p",null,"When invoking ",Object(o.b)("inlineCode",{parentName:"p"},"mapper.createMap()"),", we've already seen how we can pass ",Object(o.b)("inlineCode",{parentName:"p"},"namingConventions")," to the 3rd argument, ",Object(o.b)("inlineCode",{parentName:"p"},"CreateMapOptions"),". ",Object(o.b)("inlineCode",{parentName:"p"},"CreateMapOptions")," also accepts a property called ",Object(o.b)("inlineCode",{parentName:"p"},"extends: Mapping[]"),"."),Object(o.b)("p",null,"This is typed very loosely so make sure to align the models properly when utilizing this feature. ",Object(o.b)("inlineCode",{parentName:"p"},"extends")," will instruct ",Object(o.b)("inlineCode",{parentName:"p"},"Mapper")," to merge the existing configurations of the other ",Object(o.b)("inlineCode",{parentName:"p"},"Mapping")," with the mapping configuration it's trying to create upon initialization."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"class Base {\n  @AutoMap()\n  base: string;\n}\n\nclass BaseDto {\n  @AutoMap()\n  base: string;\n}\n\nclass Foo extends Base {\n  @AutoMap()\n  foo: string;\n}\n\nclass FooDto extends BaseDto {\n  @AutoMap()\n  foo: string;\n}\n\nmapper.createMap(Base, BaseDto);\nmapper.createMap(Foo, FooDto, { extends: [mapper.getMapping(Base, BaseDto)] });\n")),Object(o.b)("p",null,"When ",Object(o.b)("inlineCode",{parentName:"p"},"Mapper")," executes the mapping operation from ",Object(o.b)("inlineCode",{parentName:"p"},"Foo")," to ",Object(o.b)("inlineCode",{parentName:"p"},"FooDto"),", the ",Object(o.b)("inlineCode",{parentName:"p"},"base")," property will also be mapped correctly based on ",Object(o.b)("inlineCode",{parentName:"p"},"Mapping<Base, BaseDto>")),Object(o.b)("p",null,"Custom configuration can still override the merged configuration from ",Object(o.b)("inlineCode",{parentName:"p"},"extends")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { mapFrom } from '@automapper/core';\n\nmapper\n  .createMap(Foo, FooDto, { extends: [mapper.getMapping(Base, BaseDto)] })\n  .forMember(\n    (destination) => destination.base,\n    mapFrom((source) => source.foo)\n  );\n")),Object(o.b)("p",null,"Now, ",Object(o.b)("inlineCode",{parentName:"p"},"Mapper")," will map ",Object(o.b)("inlineCode",{parentName:"p"},"base")," with ",Object(o.b)("inlineCode",{parentName:"p"},"source.foo")," instead of ",Object(o.b)("inlineCode",{parentName:"p"},"source.base")," when it executes the mapping operation from ",Object(o.b)("inlineCode",{parentName:"p"},"Foo")," to ",Object(o.b)("inlineCode",{parentName:"p"},"FooDto"),"."),Object(o.b)("h2",{id:"arrays-of-objects"},"Arrays of objects"),Object(o.b)("p",null,"Arrays of objects are ",Object(o.b)("strong",{parentName:"p"},"auto-mapped")," if they also follow convention. Assume the following case:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"export class Address {\n  @AutoMap()\n  street: string;\n  @AutoMap()\n  city: string;\n  @AutoMap()\n  state: string;\n}\n\nexport class User {\n  @AutoMap({ typeFn: () => Address })\n  addresses: Address[];\n}\n\nexport class AddressDto {\n  @AutoMap()\n  formattedAddress: string;\n}\n\nexport class UserDto {\n  @AutoMap({ typeFn: () => AddressDto })\n  addresses: AddressDto[];\n}\n")),Object(o.b)("p",null,"Notice that ",Object(o.b)("inlineCode",{parentName:"p"},"User#addresses")," and ",Object(o.b)("inlineCode",{parentName:"p"},"UserDto#addresses")," are ",Object(o.b)("strong",{parentName:"p"},"conventionally matching"),". If we provide the metadata (with ",Object(o.b)("inlineCode",{parentName:"p"},"AutoMap")," like above) and create the respective ",Object(o.b)("inlineCode",{parentName:"p"},"Mapping"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@automapper/*")," should be able to ",Object(o.b)("strong",{parentName:"p"},"automatically")," map ",Object(o.b)("inlineCode",{parentName:"p"},"User#addresses")," as ",Object(o.b)("inlineCode",{parentName:"p"},"Address[]")," to ",Object(o.b)("inlineCode",{parentName:"p"},"UserDto#addresses")," as ",Object(o.b)("inlineCode",{parentName:"p"},"AddressDto[]")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"mapper.createMap(Address, AddressDto).forMember(\n  (d) => d.formattedAddress,\n  mapFrom((s) => s.street + ' ' + s.city + ' ' + s.state)\n);\n\nmapper.createMap(User, UserDto);\n")),Object(o.b)("p",null,"Check out this ",Object(o.b)("a",{parentName:"p",href:"https://stackblitz.com/edit/typescript-automapper-jlxuv8"},"Stackblitz")," for usage with ",Object(o.b)("inlineCode",{parentName:"p"},"pojos")),Object(o.b)("h2",{id:"enums"},"Enums"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@automapper/*")," does not care about Enum type because ultimately the value type of these enum properties are either ",Object(o.b)("inlineCode",{parentName:"p"},"string")," or ",Object(o.b)("inlineCode",{parentName:"p"},"number"),". To work with enums, please provide ",Object(o.b)("inlineCode",{parentName:"p"},"String")," or ",Object(o.b)("inlineCode",{parentName:"p"},"Number")," to your enum properties. This applies to both ",Object(o.b)("inlineCode",{parentName:"p"},"classes")," and ",Object(o.b)("inlineCode",{parentName:"p"},"pojos")," plugins"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"// classes\n\nexport enum UserRole {\n  Admin = 'admin',\n  User = 'user',\n}\n\nexport class User {\n  @AutoMap({ typeFn: () => String }) // because UserRole is a string enum\n  role: UserRole;\n}\n\n// pojos\n\nexport interface User {\n  role: UserRole;\n}\n\ncreateMetadataMap<User>('User', {\n  role: String, // because UserRole is a string enum\n});\n")),Object(o.b)("h2",{id:"classes-only-transformer-plugin"},"(",Object(o.b)("inlineCode",{parentName:"h2"},"classes")," only) Transformer Plugin"),Object(o.b)("p",null,"Verbosity with ",Object(o.b)("inlineCode",{parentName:"p"},"@AutoMap()")," cannot be denied. If you're feeling adventurous, take a look at ",Object(o.b)("a",{parentName:"p",href:"/docs/plugins-system/classes-transformer-plugin"},"Transformer Plugin")," to learn how to alleviate the boiler-plate pain point."))}l.isMDXComponent=!0}}]);